#!/usr/bin/perl

use strict;
use warnings;
use DataDog::DogStatsd;
use File::Slurp;
use Data::Dumper;

#TODO: handle options
my $debug = 0;

my $dogstatsd = DataDog::DogStatsd->new;
#$dogstatsd->increment( 'mail.script_runs') unless $debug;

#my ($logfile) = @ARGV;
my $spooldir = '/var/spool/mail';
chdir($spooldir) or die "couldn't chdir($spooldir): $!";

# read file names
opendir(SPOOL,$spooldir) or die "couldn't opendir($spooldir): $!";
my @spool_files = readdir(SPOOL);
closedir(SPOOL) or die "couldn't closedir($spooldir): $!";

my %cache;

while (1) {
	foreach my $file (@spool_files) {
		next if $file =~ /^[.]/; # skip hiddens
		next if $file =~ /[.]/; # skip files with any dots in them
		next unless -r $file;
		calculate_stats($file);
	}

	my $now_pretty = `date`;
	chomp($now_pretty);
	print "about to snooze ($now_pretty)\n";
	sleep(60); # TODO: scale to how long it took to do an iteration
}


sub calculate_stats {
	my($filename) = @_;
	my $mtime = (stat($filename))[9];
	my ($size,$message_count);
	if (defined($cache{$filename}->{mtime}) and $mtime == $cache{$filename}->{mtime}) {
		print "using cache\n";
		$size = $cache{$filename}->{bytes};
		$message_count = $cache{$filename}->{messages};
	} else {
		$size = -s $filename;
		$message_count = `grep '^From ' $filename | wc -l`;
		chomp($message_count);
		$cache{$filename}->{bytes} = $size;
		$cache{$filename}->{messages} = $message_count;
		$cache{$filename}->{mtime} = $mtime;

		my $now_pretty = `date`;
		chomp($now_pretty);
		print "$filename ($now_pretty) $size $message_count $mtime\n";
	}
	#print "$filename $size $message_count $mtime\n";

	# TODO: tag user
	$dogstatsd->gauge( "mail.${filename}.bytes", $size ) unless $debug;
	$dogstatsd->gauge( "mail.${filename}.messages", $message_count ) unless $debug;
}
